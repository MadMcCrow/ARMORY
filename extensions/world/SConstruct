#!/usr/bin/env python

import os

# get the master environment
Import('env')
Import('output_path')

# get data for builder
_platform = env["platform"]
_target = env["target"]
_output = output_path # if it does not work, we'll go through env
_folder = str(Dir('.').srcnode())
_libname = os.path.split(_folder)[1] # a bit farfetched

# may not be compatible with windows (check msvc/msys/mingw for options)
cxx_flags =  ['-std=c++17', '-fopenmp']
# Position Independent Code , requiered for unix shared libs
cc_flags  = ['-O3', '-fPIC', '-fopenmp']
ld_flags  = ['-fopenmp']

# get all source and include files files
sources = [os.path.join(p, n) for p, s, f in os.walk(os.path.join(_folder, 'src')) for n in f if n.endswith('cpp')]
sources += ['register_types.cpp']
includes = ['./', 'inc/']

# customise env for modules
module_env = env.Clone()

module_env['VARIANT_DIR'] = Dir("../build")
#module_env['LIBS'] = [] // maybe purging libs was not a good idea after all

#flags
module_env.Append(CPPPATH=list(set(includes))) # pass flags for compiler
module_env.Append(CXXFLAGS=list(set(cxx_flags)))
module_env.Append(CCFLAGS=list(set(cc_flags)))
module_env.Append(LINKFLAGS=list(set(ld_flags)))

# split generation of shared objects
shared_objects = []
for s in sources :
    t = os.path.splitext(os.path.basename(s))[0] # scons will pick the correct extension
    shared_objects += module_env.SharedObject(target = t , source = s)

# define our libraries
library = "libgd" + _libname
if _platform == "macos":
    library = module_env.SharedLibrary(
        "{}/{}.{}.{}.framework/{}.{}.{}".format(
            _output, library,_platform,_target,library,_platform,_target),
        source=shared_objects,
    )
else:
    library = module_env.SharedLibrary(
        "{}/{}.{}.{}.{}{}".format(
            _output, library,_platform,_target,env["arch_suffix"], env["SHLIBSUFFIX"]),
        source=shared_objects,
    )
# build it
Default(library)

