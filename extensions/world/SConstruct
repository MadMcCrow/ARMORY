#!/usr/bin/env python

import os

# get the master environment
Import('env')
Import('output_path')

# get data for builder
_platform = env["platform"]
_target = env["target"]
_folder = output_path # if it does not work, we'll go through env
_libname = os.getcwd()

# may not be compatible with windows (check msvc/msys/mingw for options)
cxx_flags =  ['-std=c++17', '-fopenmp']
# Position Independent Code , requiered for unix shared libs
cc_flags  = ['-O3', '-fPIC', '-fopenmp', '-static']


# get all source and include files files
sources = [os.path.join(p, n) for p, s, f in os.walk(_libname) for n in f if n.endswith('cpp')]
sources += ['register_types.cpp']
includes = ['inc/']
# customise env for modules
module_env = env.Clone()
module_env.Append(CPPPATH=includes) # pass flags for compiler
module_env['LIBS'] = ['-fopenmp']  # Don't inject any dependencies into our shared library.
module_env.Append(CXXFLAGS=cxx_flags)
module_env.Append(CCFLAGS=cc_flags)
# define our libraries
library = "libgd" + _libname
if _platform == "macos":
    library = module_env.SharedLibrary(
        "{}/{}.{}.{}.framework/{}.{}.{}".format(
            _folder, library,_platform,_target,library,_platform,_target),
        source=sources,
    )
else:
    library = module_env.SharedLibrary(
        "{}/{}.{}.{}.{}{}".format(
            _folder, library,_platform,_target,env["arch_suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )
# build it
Default(library)
