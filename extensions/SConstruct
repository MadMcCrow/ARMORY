#!/usr/bin/env python

# check scons version before going any further
EnsureSConsVersion(4, 0)

import os
import platform
import sys
import subprocess

# Using godot as our conscript
env =  SConscript("../godot-cpp/SConstruct")

_platform = env["platform"]
_target = env["target"]
_folder = "../armory/bin"

if _platform == "windows" :
    cxx_flags = ['/std:c++17', '/Zc:alignedNew']
    cc_flags  = ['/O2'] + ["-EHsc", "-MD"]
else :
    # godot is not yet fully compatible with '-std=c++20' so we stay at 17 with padded
    cxx_flags =  ['-std=c++17', '-fopenmp', '-Wpadded']
    # Position Independent Code , requiered for unix shared libs
    cc_flags  = ['-O3', '-fPIC', '-fopenmp' '-static']


# list all modules
mod_list = [d for d in os.listdir() if os.path.isdir(d)]

# build all modules as extensions
for mod_dir in mod_list :
    print("building mod {}".format(mod_dir))
    # add our sources to the build environment
    module_env = env.Clone()
    # customise env for modules
    module_env['LIBS'] = ['-fopenmp']  # Don't inject Godot's dependencies into our shared library.
    module_env.Append(CPPPATH=[os.path.join(mod_dir, 'inc/')]) # pass flags for compiler
    module_env.Append(CXXFLAGS=cxx_flags)
    module_env.Append(CCFLAGS=cc_flags)
    # get all source files
    sources = [os.path.join(p, n) for p, s, f in os.walk(mod_dir) for n in f if n.endswith('cpp')]
    sources += [os.path.join(mod_dir,'register_types.cpp')]
    # define our libraries
    library = "libgd" + mod_dir
    if _platform == "macos":
        library = env.SharedLibrary(
            "{}/{}.{}.{}.framework/{}.{}.{}".format(
                _folder, library,_platform,_target,library,_platform,_target),
            source=sources,
        )
    else:
        library = env.SharedLibrary(
            "{}/{}.{}.{}.{}{}".format(
                _folder, library,_platform,_target,env["arch_suffix"], env["SHLIBSUFFIX"]),
            source=sources,
        )
    # build it
    Default(library)
