#!/usr/bin/env python
import os
import sys

extension="armory"
src_folder = "src/"
inc_folder = "inc/"
build_folder = "src/"

# use variant to build outside of sources
VariantDir(build_folder, src_folder, duplicate=False)
# Godot-cpp gives us the base SConscript to include
env = SConscript("../godot-cpp/SConstruct", variant_dir="build", duplicate=True)

# add file paths
env.Append(CPPPATH=[inc_folder])

# outpath defines the path we'll use for producing our library
out_path = ("bin/")

# Common sources
sources = [os.path.join(p, n) for p, s, f in os.walk(src_folder) for n in f if n.endswith('cpp')]
builds = [os.path.join(build_folder, os.path.relpath(p, src_folder)) for p in sources ]

# storing in local variables for later :
platform = env["platform"]
target = env["target"]
suffix = env["suffix"]
shlib  = env["SHLIBSUFFIX"]

# Linux Build
if platform in ["linuxbsd", "linux"]:
    env.Append(CXXFLAGS=['-std=c++20','-Wpadded'])
    env.Append(CCFLAGS=['-fPIC', '-O3', '-g'])
    library = env.SharedLibrary( f"{out_path}/lib{extension}{suffix}{shlib}", source=builds)
# MacOS
elif platform  == "macos":
    # these flags won't work on aarch64
    env.Append(CCFLAGS = ['-g','-O3', '-arch', 'x86_64', '-std=c++20'])
    env.Append(LINKFLAGS = ['-arch', 'x86_64'])
    library = env.SharedLibrary(f"{out_path}/lib{extension}.{platform}.{target}.framework/lib{extension}.{platform}.{target}", source=builds)

else: # platform  == "windows":
    if target == "debug":
        env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '/MDd', '-DOSC_HOST_LITTLE_ENDIAN'])
    else:
        env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '/MD', '-DOSC_HOST_LITTLE_ENDIAN'])\
    # add libraries :
    library = env.SharedLibrary( f"{out_path}/lib{extension}{suffix}{shlib}", source=builds )

# disable warnings :
env.Append(CCFLAGS=["-w"])

# Just build !
Default(library)