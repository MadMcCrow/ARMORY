#!/usr/bin/env python
# SCsub
#
# Copyright © Noé Perard-Gayot 2021.                                                                                        #
# Licensed under the MIT License. You may obtain a copy of the License at https://opensource.org/licenses/mit-license.php   #
#



# folders for headers and sources
src_folder = 'src'
inc_folder = 'inc'

# get module name from folder
import os.path
module_name = os.path.basename(Dir('.').srcnode().abspath)
module_shared_name = ("_".join(["module",module_name,"shared"]))

# Scons import
Import("env")
Import("env_modules")

# add our sources to the build environment
module_env = env_modules.Clone()
module_obj = Glob(src_folder + '/*.cpp')
module_env.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# we need our register type source :
sources = ["register_types.cpp"]

# Don't inject Godot's dependencies into our shared library.
module_env['LIBS'] = []


module_is_shared_lib = ARGUMENTS.get(module_shared_name, 'no') == "yes"

if module_is_shared_lib:
    # Shared lib compilation
    # reference our headers in 'inc'
    module_env.Append(CPPPATH=[inc_folder])
    # cpp 17
    module_env.Append(CXXFLAGS=['-std=c++17','-Wpadded'])
    module_env.Append(CCFLAGS=['-O3'])
    # Position Independent Code , requiered for shared libs
    module_env.Append(CCFLAGS=['-fPIC'])
    module_env['LIBS'] = []
    # Define the shared library. By default, it would be built in the module's
    # folder, however it's better to output it into `bin` next to the
    # Godot binary.
    shared_lib = module_env.SharedLibrary(target='#bin/'+ module_name, source=sources)
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    # Finally, notify the main build environment it now has our shared library
    # as a new dependency.
    # LIBPATH and LIBS need to be set on the real "env" (not the clone)
    # to link the specified libraries to the Godot executable.
    env.Append(LIBPATH=['#bin'])
    # SCons wants the name of the library with it custom suffixes
    # (e.g. ".x11.tools.64") but without the final ".so".
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    env.Append(LIBS=[shared_lib_shim])
    pass
else:
    # Static compilation
    # reference our headers in 'inc'
    module_env.Append(CPPPATH=[inc_folder])
    # godot is not yet fully compatible with '-std=c++20' so we stay at 17
    module_env.Append(CXXFLAGS=['-std=c++17','-Wpadded'])
    module_env.Append(CCFLAGS=['-O3'])
    # add sources to build here
    module_env.add_source_files(env.modules_sources, sources)


# output to signal this has been done
print('\x1b[6;30;42m' + "{} added as {} library".format(module_name, "dynamic" if module_is_shared_lib else "static")  + '\x1b[0m')
